package com.mycompany.imageprocessor;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class MainScreen extends javax.swing.JFrame {

    private final Processor processor;
    private String tempPath;
    private final String TEMP_FILENAME = "/tempimage.bmp";
    
    public MainScreen() {
        initComponents();
        processor = new Processor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        openFileButton = new javax.swing.JButton();
        algorithmComboBox = new javax.swing.JComboBox<>();
        applyButton = new javax.swing.JButton();
        rowsTextField = new javax.swing.JTextField();
        bitLevelComboBox = new javax.swing.JComboBox<>();
        colsTextField = new javax.swing.JTextField();
        instructionLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        originalLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        transformedLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        openFileButton.setText("Open File");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Downscale", "Zoom (Nearest Neighbor)", "Zoom (LinearX)", "Zoom (LinearY)", "Zoom (Bilinear)", "Reduce Graylevel", "Global Histogram Equalization", "Local Histogram Equalization", "Median Filter", "Laplacian Filter", "Smoothing Filter", "HighBoost Filter", "BitPlane Removal" }));
        algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmComboBoxActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        rowsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rowsTextField.setToolTipText("Desired Rows");

        bitLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7" }));
        bitLevelComboBox.setToolTipText("grayscale bit levels");

        colsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        colsTextField.setToolTipText("Desired Columns");

        instructionLabel.setText("Instructions: For Downscale, enter the new row x column resolution in the 2 text boxes to the left of Apply.");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(openFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bitLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton)
                        .addGap(7, 7, 7)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addComponent(instructionLabel))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFileButton)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bitLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyButton)
                    .addComponent(saveButton)
                    .addComponent(copyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructionLabel)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        originalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        originalLabel.setText("Original Image");
        originalLabel.setToolTipText("Original Image");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(originalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(originalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );

        transformedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        transformedLabel.setText("Transformed Image");
        transformedLabel.setToolTipText("Transformed Image");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transformedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transformedLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Pressing the OpenFile button brings up the JFileChooser OpenDialog.
     * The User chooses an image file to be displayed on the left side.
     */
    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        FileFilter filter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            BufferedImage image = null;
            try {
                image = ImageIO.read(new File(fileChooser.getSelectedFile().getAbsolutePath()));
            } catch (Exception e) {
                System.err.println(e + " failed to load image.");
            }
            originalLabel.setIcon(new ImageIcon(image));
            originalLabel.setText("");
            tempPath = fileChooser.getCurrentDirectory().getAbsolutePath() + TEMP_FILENAME;
            processor.loadImageGrayscale(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_openFileButtonActionPerformed
    
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try{
            //Extracting values from the text fields and combo boxes.
            String algorithm = algorithmComboBox.getSelectedItem().toString();        
            Integer desiredRow;
            Integer desiredCol;
            int n = 3;
            boolean centerIsPositive = false;
            int numComboBoxVal;
            String colsStr;
            boolean success = true;
        
            switch(algorithm) {
                case "Downscale":
                    desiredRow = new Integer(rowsTextField.getText());
                    desiredCol = new Integer(colsTextField.getText());
                    processor.downscale(desiredRow, desiredCol);
                    break;
                case "Zoom (Nearest Neighbor)":
                    desiredRow = new Integer(rowsTextField.getText());
                    desiredCol = new Integer(colsTextField.getText());
                    processor.zoomNearestNeighbor(desiredRow, desiredCol);
                    break;
                case "Zoom (LinearX)":
                    desiredRow = new Integer(rowsTextField.getText());
                    desiredCol = new Integer(colsTextField.getText());
                    processor.zoomLinearX(desiredRow, desiredCol);
                    break;
                case "Zoom (LinearY)":
                    desiredRow = new Integer(rowsTextField.getText());
                    desiredCol = new Integer(colsTextField.getText());
                    processor.zoomLinearY(desiredRow, desiredCol);
                    break;
                case "Zoom (Bilinear)":
                    desiredRow = new Integer(rowsTextField.getText());
                    desiredCol = new Integer(colsTextField.getText());
                    processor.zoomBilinear(desiredRow, desiredCol);
                    break;
                case "Reduce Graylevel":
                    numComboBoxVal = new Integer(bitLevelComboBox.getSelectedItem().toString());
                    processor.reduceGraylevel(numComboBoxVal);
                    break;
                case "Global Histogram Equalization":
                    processor.histogramEqualizationGlobal();
                    break;
                case "Local Histogram Equalization":    
                    n = new Integer(rowsTextField.getText());
                    processor.histogramEqualizationLocal(n);
                    break;
                case "Median Filter":    
                    n = new Integer(rowsTextField.getText());
                    processor.medianFilter(n);
                    break;
                case "Laplacian Filter":    
                    n = new Integer(rowsTextField.getText());
                    colsStr = colsTextField.getText();
                    if (colsStr.equals("true")) {
                        centerIsPositive = true;
                    }
                    processor.sharpeningLaplacianFilter(n, centerIsPositive, false);
                    break;
                case "HighBoost Filter":
                    n = new Integer(rowsTextField.getText());
                    colsStr = colsTextField.getText();
                    numComboBoxVal = new Integer(bitLevelComboBox.getSelectedItem().toString());
                    processor.highBoostingFilter(n, numComboBoxVal, colsStr);                
                    break;
                case "BitPlane Removal":
                    String bitplanes = rowsTextField.getText();
                    String[] strArr = bitplanes.split(",");
                    int[] numArr = new int[strArr.length];
                    for (int i = 0; i < strArr.length; i++) {
                        numArr[i] = Integer.parseInt(strArr[i]);                        
                    }
                    processor.removeBitplane(numArr);
                    break;
                case "Smoothing Filter":    
                    n = new Integer(rowsTextField.getText());
                    colsStr = colsTextField.getText();
                    processor.smoothingFilter(n, colsStr);                
                    break;
                default: System.out.println("Something in the algorithm combo box was chosen incorrectly");
                    break;
            }
        //Save and Display
        processor.saveImage(tempPath);
        BufferedImage bf = ImageIO.read(new File(tempPath));
        transformedLabel.setIcon(new ImageIcon(bf));
        transformedLabel.setText("");
        } catch (Exception e) {
            System.err.println(e + " was found");
        }        
    }//GEN-LAST:event_applyButtonActionPerformed

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        String instruction = String.valueOf(algorithmComboBox.getSelectedItem());
        switch (instruction) {
            case "Downscale":
                instructionLabel.setText("<html>Instructions: For Downscale, enter the new row x column resolution in the 2 text boxes to the left of Apply.</html>");
                break;
            case "Zoom (LinearX)":
                instructionLabel.setText("<html>Instructions: For LinearX, enter the new row x column resolution in the 2 text boxes to the left of Apply.</html>");
                break;
            case "Zoom (LinearY)":
                instructionLabel.setText("<html>Instructions: For LinearY, enter the new row x column resolution in the 2 text boxes to the left of Apply.</html>");
                break;
            case "Zoom (Bilinear)":
                instructionLabel.setText("<html>Instructions: For Bilinear, enter the new row x column resolution in the 2 text boxes to the left of Apply.</html>");
                break;
            case "Reduce Graylevel":
                instructionLabel.setText("<html>Instructions: For Reducing Graylevel, use the ComboBox, to the right of the algorithm box to pick what the new bit level should reduce to from 1 to 7</html>");
                break;
            case "Zoom (Nearest Neighbor)":
                instructionLabel.setText("<html>Instructions: For Nearest Neighbor, enter the new row x column resolution in the 2 text boxes to the left of Apply.</html>");
                break;
            case "Global Histogram Equalization":
                instructionLabel.setText("<html>Instructions: For Global Histogram Equalization, just hit apply.</html>");
                break;
            case "Local Histogram Equalization":
                instructionLabel.setText("<html>Instrutions: For Local Histogram Equalization, enter the size for the N x N mask in the first text box to the right of the number combo box.</html>");
                break;
            case "BitPlane Removal":
                instructionLabel.setText("<html>Instructions: For BitPlane removal, enter the bit planes to be removed in the first text box to the right of the number combo box. Write the values separated by comma, for planes 0-7. ie: 1,4,5,7</html>");
                break;
            case "Median Filter":
                instructionLabel.setText("<html>Instructions: For MedianFilter, enter the mask size N in the first textbox to the right of the number combo box.</html>");
                break;
            case "Laplacian Filter":
                instructionLabel.setText("<html>Instructions: For LaplacianFilter, enter the mask size N in the first textbox to the right of the number combo box. The 2nd text box to the right, you may enter 'true' to use positive a positive center laplacian mask.</html>");
                break;
            case "Smoothing Filter":
                instructionLabel.setText("<html>Instructions: For SmoothingFilter, enter the mask size N in the first textbox to the right of the number combo box. The 2nd text box to the right, enter type of smoothing filter such as 'Gaussian', 'Weighed', or 'Box'(Default)</html>");
                break;
            case "HighBoost Filter":
                instructionLabel.setText("<html>Instructions: For High Boost Filter, enter the mask size N in the first textbox to the right of the number combo box. The 2nd text box to the right, enter type of smoothing filter such as 'Gaussian', 'Weighted', or 'Box' (Default). Use the number combo box to specify the weight of the mask K.</html>");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fileChooser.setDialogTitle("Name the file to save");
        FileFilter filter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());        
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String path = fileChooser.getSelectedFile().getAbsolutePath();
                processor.saveImage(path);
            } catch (Exception e) {
                System.err.println(e + " failed to load image.");
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Copy the adjustments of the transformed image to the original image.
     */
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        processor.copyMatrix();
        try {
            BufferedImage bf = ImageIO.read(new File(tempPath));
            originalLabel.setIcon(new ImageIcon(bf));
            originalLabel.setText("");
        } catch (Exception e) {
            System.out.println(e + " was found during copy.");
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithmComboBox;
    private javax.swing.JButton applyButton;
    private javax.swing.JComboBox<String> bitLevelComboBox;
    private javax.swing.JTextField colsTextField;
    private javax.swing.JButton copyButton;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton openFileButton;
    private javax.swing.JLabel originalLabel;
    private javax.swing.JTextField rowsTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel transformedLabel;
    // End of variables declaration//GEN-END:variables
}
